"use client";

import { createClient } from "@/lib/client";
import { useMutation, useQueryClient } from "@tanstack/react-query";

interface StoreFormData {
    yboutiqueintitule: string;
    yboutiqueadressemall?: string;
    ymallidfk: number;
}

export function useCreateStore() {
    const supabase = createClient();
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: async (formData: StoreFormData) => {
            // Generate a store code based on the name
            const storeCode = formData.yboutiqueintitule
                .toLowerCase()
                .replace(/[^a-z0-9]/g, '')
                .substring(0, 10) + Date.now().toString().slice(-4);

            // Generate a unique store ID (this might be auto-generated by the database)
            const storeId = Date.now(); // Simple ID generation - adjust as needed

            const storeData = {
                yboutiqueid: storeId,
                yboutiqueintitule: formData.yboutiqueintitule,
                yboutiqueadressemall: formData.yboutiqueadressemall || "",
                yboutiquecode: storeCode,
                ymallidfk: formData.ymallidfk
            };

            const { data, error } = await supabase
                .schema("morpheus")
                .from("yboutique")
                .insert(storeData)
                .select()
                .single();

            if (error) {
                throw new Error(error.message);
            }

            return data;
        },
        onSuccess: () => {
            // Invalidate and refetch stores with all possible query keys
            queryClient.invalidateQueries({ queryKey: ["stores"] });
            queryClient.invalidateQueries({ queryKey: ["filtered-stores"] });
        },
        onError: (error) => {
            console.error("Failed to create store:", error);
        }
    });
}

export function useUpdateStore() {
    const supabase = createClient();
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: async ({ id, storeData }: { id: number; storeData: StoreFormData }) => {
            const updateData = {
                yboutiqueintitule: storeData.yboutiqueintitule,
                yboutiqueadressemall: storeData.yboutiqueadressemall || "",
                ymallidfk: storeData.ymallidfk
            };

            const { data, error } = await supabase
                .schema("morpheus")
                .from("yboutique")
                .update(updateData)
                .eq("yboutiqueid", id)
                .select()
                .single();

            if (error) {
                throw new Error(error.message);
            }

            return data;
        },
        onSuccess: () => {
            // Invalidate and refetch stores with all possible query keys
            queryClient.invalidateQueries({ queryKey: ["stores"] });
            queryClient.invalidateQueries({ queryKey: ["filtered-stores"] });
        },
        onError: (error) => {
            console.error("Failed to update store:", error);
        }
    });
}

export function useDeleteStore() {
    const supabase = createClient();
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: async (storeId: number) => {
            const { error } = await supabase
                .schema("morpheus")
                .from("yboutique")
                .delete()
                .eq("yboutiqueid", storeId);

            if (error) {
                throw new Error(error.message);
            }

            return storeId;
        },
        onSuccess: () => {
            // Invalidate and refetch stores with all possible query keys
            queryClient.invalidateQueries({ queryKey: ["stores"] });
            queryClient.invalidateQueries({ queryKey: ["filtered-stores"] });
        },
        onError: (error) => {
            console.error("Failed to delete store:", error);
        }
    });
}